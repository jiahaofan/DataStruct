#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
template<class K,class V>
struct AVLTreeNode
{
	K _key;
	V _value;
	AVLTreeNode<K, V>* _left;
	AVLTreeNode<K, V>* _right;
	AVLTreeNode<K, V>* _parent;
	int _bf;  //平衡因子 可以是 0 1 -1
	AVLTreeNode(const K& key, const V& value)
		:_key(key),
		_value(value),
		_left(NULL),
		_right(NULL),
		_parent(NULL),
		_bf(0)
	{}
};

template<class K,class V>
class AVLTree
{
	typedef AVLTreeNode<K, V> Node;
public:
	AVLTree()
		:_root(NULL)
	{}

	bool Insert(const K& key, const V& value)
	{
		if (_root == NULL)
		{
			_root = new Node(key, value);
			return true;
		}
		Node* cur = _root;
		Node* parent = NULL;
		/*查找插入的位置*/
		while (cur)
		{
			if (cur->_key > key)
			{
				parent = cur;
				cur = cur->_left;
			}
			else if (cur->_key < key)
			{
				parent = cur;
				cur = cur->_right;
			}
			else
			{
				return false;
			}
		}
		Node* tmp = new Node(key, value);  //插入数据
		if (parent->_key > key)
		{
			parent->_left = tmp;
			tmp->_parent = parent;
		}
		else
		{
			parent->_right = tmp;
			tmp->_parent = parent;
		}
		//调节平衡因子
		cur = tmp;
		bool isRotate = false;
		/*查看需不需要调节*/
		while (parent)
		{
			/*变换parent的平衡因子*/
			if (parent->_left == cur)
			{
				parent->_bf--;
			}
			else
			{
				parent->_bf++;
			}
			if (parent->_bf == 0)//一定是由1或-1变得，不会影响上层
			{
				break;
			}
			else if (parent->_bf == 1 || parent->_bf == -1) //继续上调
			{
				cur = parent;
				parent=cur->_parent;
			}

			/*进行旋转*/
			else//已经不平衡了
			{
				if (parent->_bf == 2)
				{
					if (cur->_bf == 1)
					{
						_RotateL(parent);
					}
					else // -1
					{
						_RotateRL(parent);
					}
				}
				else // -2
				{
					if (cur->_bf == -1)
					{
						_RotateR(parent);
					}
					else // 1
					{
						_RotateLR(parent);
					}
				}

				isRotate = true;
				break;
			}
		}
		if (isRotate)
		{
			Node* ppNode = parent->_parent;
			if (ppNode == NULL)
				_root = parent;
			else if (ppNode->_key > parent->_key)
				ppNode->_left = parent;
			else
				ppNode->_right = parent;
		}

		return true;
	}

	void InOrder()
	{
		_InOrder(_root);
	}

	bool IsBlance()
	{
		return _IsBlance(_root);
	}

protected:
	int _Height(Node* root)
	{
		if (root == NULL)
		{
			return 0;
		}
	    int left=_Height(root->_left);
		int right=_Height(root->_right);
		return left > right ? left + 1 : right + 1;
	}
	bool _IsBlance(Node* root)
	{
		if (root == NULL)
		{
			return true;
		}
		int bf = _Height(root->_right) - _Height(root->_left);
		//assert(bf == root->_bf);

		if (bf != root->_bf)
		{
			cout << "平衡因子异常：" << root->_key << endl;
		}

		return bf == root->_bf && abs(bf) < 2;

	}
	void _InOrder(Node* root)
	{
		if (root == NULL)
		{
			return;
		}
		_InOrder(root->_left);
		cout << root->_key << " ";
		_InOrder(root->_right);
	}
	void _RotateL(Node*& parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;
		parent->_right = subRL;
		if (subRL)
		{
			subRL->_parent = parent;
		}
		subR->_left = parent;
		subR->_parent = parent->_parent;
		parent->_parent = subR;
		parent->_bf = subR->_bf = 0;
		parent = subR;
	}

	void _RotateR(Node*& parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		parent->_left = subLR;
		if (subLR)
		{
			subLR->_parent = parent;
		}
		subL->_right = parent;
		subL->_parent = parent->_parent;
		parent->_parent = subL;
		parent->_bf = subL->_bf = 0;
		parent = subL;
	}

	void _RotateLR(Node* parent)
	{
		Node* pNode = parent;
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		int bf = subLR->_bf;
		_RotateL(parent->_left);
		_RotateR(parent);

		if (bf == -1)
		{
			subL->_bf = 0;
			pNode->_bf = 1;
		}
		else if (bf == 1)
		{
			subL->_bf = -1;
			pNode->_bf = 0;
		}
		else
		{
			subL->_bf = 0;
			pNode->_bf = 0;
		}

		subLR->_bf = 0;
	}



	void _RotateRL(Node*& parent)
	{
		Node* pNode = parent;
		Node* subRNode = parent->_right;
		Node* subRLNode = subRNode->_left;
		int bf = subRLNode->_bf;

		_RotateR(parent->_right);
		_RotateL(parent);

		if (bf == 1)
		{
			subRNode->_bf = 0;
			pNode->_bf = -1;
		}
		else if (bf == -1)
		{
			subRNode->_bf = 1;
			pNode->_bf = 0;
		}
		else
		{
			subRNode->_bf = 0;
			pNode->_bf = 0;
		}

		subRLNode->_bf = 0;
	}
private:
	Node* _root;
};


void test()
{
	AVLTree<int ,int> t;
	t.Insert(1, 1);
	t.Insert(2, 1);
	t.Insert(3, 1);
	t.Insert(4, 1);
	t.Insert(5, 1);
	t.InOrder();
    bool ret=t.IsBlance();
	cout << ret << endl;
}

int main()
{
	test();
	system("pause");
	return 0;
}