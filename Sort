#include<iostream>
using namespace std;
#include<assert.h>
//直接插入排序
void InsertSort(int *arr, size_t size)
{
	assert(arr);
	for (size_t i = 0; i < size-1; i++)
	{
		if (arr[i]>arr[i + 1])
		{
			int tmp = arr[i + 1];
			int j = i;
			while (tmp < arr[j] && j >= 0)
			{
				arr[j + 1] = arr[j];
				--j;
			}
			arr[j + 1] = tmp;
		}
	}
}

//直接插入排序优化，在寻找插入点的时候因为前面的数已经排好了次序
//所以可以使用二分查找加快查找效率
void BinaryInsertSort(int *arr, int size)
{
	assert(arr);
	for (int i = 0; i < size-1; i++)
	{
		if (arr[i]>arr[i + 1])
		{
			int tmp = arr[i + 1];
			int mid = 0;
			int left = 0;
			int right = i;
			while (left <= right)
			{
				mid = (left+right)/2;
				if (arr[mid]>tmp)
				{
					right = mid - 1;
				}
				else if (arr[mid]<tmp)
				{
					left = mid + 1;
				}
				else
				{
					break;
				}
			
			}
			for (int j = i+1; j > right+1; j--)
			{
				arr[j] = arr[j-1];
			}
			arr[right+1] = tmp;
		}
	}
}




void Print(int *arr, size_t size)
{
	for (size_t i = 0; i < size; i++)
	{
		cout << arr[i] << " ";
	}
	cout << endl;
}

//void ShellSort(int *arr, int size)
//{
//   assert(arr);
//	int gap = size/2;
//	for (gap; gap>0; gap /= 2)
//	{
//		for (int i = gap; i < size; i++)
//		{
//			for (int j = i - gap; j >= 0 && arr[j]>arr[j + gap]; j -= gap)
//			{
//				swap(arr[j], arr[j + gap]);
//			}
//		}
//	}
//}
//


//希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。
//
//希尔排序是基于插入排序的以下两点性质而提出改进方法的：
//
//插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率
//但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位

//算法实现:希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。
//	这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，
//	算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好
//	的了（此时插入排序较快）。
void ShellSort(int *arr, int size)
{
	assert(arr);
	int gap = size / 2;
	for (gap; gap > 0; gap /= 2)
	{
		for (int i = 0; i < size - gap; i++)
		{
			for (int j = i; j >= 0 && arr[i] > arr[gap + i]; j = j - gap)
				{
				    swap(arr[j], arr[j + gap]);
				}
		}
	}
}


//它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
//
//选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n - 1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。
//选择排序
void SelectSort(int *arr, int size)
{
	assert(arr);
	int index = 0;
	for (int i = 0; i < size - 1; i++)
	{
		index = i;
		for (int j = i+1; j < size; j++)
		{
			if (arr[index]>arr[j])
			{
				index =j;
			}
		}
		if (i != index)
		{
			swap(arr[i], arr[index]);
		}
	}
}
void AdjustDown(int *arr, int size, int parent)
{
	int child = parent * 2 + 1;
	while (child < size)
	{
		if (child + 1 < size && arr[child] < arr[child + 1])
		{
			++child;
		}
		if (arr[parent] < arr[child])
		{
			swap(arr[parent], arr[child]);
			parent = child;
			child = parent * 2 + 1;
		}
		else
		{
			break;
		}
	}
}

//堆排序
void HeapSort(int *arr, int size)
{
	//建堆
	for (int i = (size - 2) / 2; i >= 0; i--)
	{
		AdjustDown(arr, size, i);
	}
	for (int i = size - 1; i > 0; i--)
	{
		swap(arr[0], arr[i]);
		AdjustDown(arr, i, 0);
	}
}

//冒泡排序
void BubbleSort(int *arr, int size)
{
	assert(arr);
	for (int i = 0; i < size-1; i++)
	{
		for (int j = i+1; j < size; j++)
		{
			if (arr[i] > arr[j])
			{
				swap(arr[i], arr[j]);
			}
		}
	}
}

//key放在左边
//void QuickSort(int *arr, int first,int last)
//{
//  assert(arr);
//	if (first >= last)
//	{
//		return;
//	}
//	int begin = first;
//	int end = last;
//	int key = arr[begin];
//	while (begin < end)
//	{
//		while (begin<end && arr[end]>key)
//		{
//			--end;
//		}
//		arr[begin] = arr[end];
//		while (begin < end && arr[begin] < key)
//		{
//			++begin;
//		}
//		arr[end] = arr[begin];
//	}
//	arr[begin] = key; 
//	QuickSort(arr, first, begin - 1);
//	QuickSort(arr, begin + 1, last);
//}


//key放在右边
//void QuickSort(int *arr, int left, int right)
//{
//	assert(arr);
//	if (left >= right)
//	{
//		return;
//	}
//	int begin = left;
//	int end = right;
//	int key = arr[right];
//	while (begin < end)
//	{
//		while (begin < end && arr[begin] <= key)
//		{
//			++begin;
//		}
//		arr[end] = arr[begin];
//		while (begin < end && arr[end] >= key)
//		{
//			--end;
//		}
//		arr[begin] = arr[end];
//	}
//	arr[end] = key;
//	QuickSort(arr, left, end - 1);
//	QuickSort(arr, end + 1, right);
//}

//void QuickSort(int *arr, int left, int right)
//{
//	assert(arr);
//	if (right-left<=13)
//	{
//		InsertSort(&arr[left], right - left + 1);
//		return;
//	}
//
//	int begin = left;
//	int end = right;
//	int key = arr[right];
//	while (begin < end)
//	{
//		while (begin < end && arr[begin] <= key)
//		{
//			++begin;
//		}
//		arr[end] = arr[begin];
//		while (begin < end && arr[end] >= key)
//		{
//			--end;
//		}
//		arr[begin] = arr[end];
//	}
//	arr[end] = key;
//	QuickSort(arr, left, end - 1);
//	QuickSort(arr, end + 1, right);
//}


//随机选取一个key
void QuickSort(int *arr, int left, int right)
{
	assert(arr);
	if (left >= right)
	{
		return;
	}
	int begin = left;
	int end = right;
	int mid = left - (left - right) / 2;
	int key = arr[mid];
	int flag = 0;
	
	while (begin < end)
	{
		while (begin < end && arr[begin] <= key)
		{
			++begin;
			if (begin == mid)
			{
				++begin;
			}
		}
		if (flag == 0)
		{
			arr[mid] = arr[begin];
			flag = 1;
		}
		else
		{
			arr[end] = arr[begin];
		}
		
		while (begin < end && arr[end] >= key)
		{
			--end;
			if (end == mid)
			{
				--end;
			}
		}
		arr[begin] = arr[end];
	}
	arr[end] = key;
	QuickSort(arr, left, end - 1);
	QuickSort(arr, end + 1, right);
}



//test

#define  _CRT_SECURE_NO_WARNINGS
#include"Sort.h"
void test()
{
	int arr[10] = { 5,9,8,7,6,10,4,3,2,1 };
	//InsertSort(arr, 10);
	//ShellSort(arr, 10);
	//SelectSort(arr, 10);
	//HeapSort(arr, 10);
	//BubbleSort(arr, 10);
	//QuickSort(arr, 0, 9);
	BinaryInsertSort(arr, 10);
	
	Print(arr, 10);
}
int main()
{
	test();
	system("pause");
	return 0;
}

